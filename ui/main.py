import streamlit as st
import requests
import pandas as pd
import plotly.express as px
import tempfile
from fpdf import FPDF
import plotly.io as pio
from datetime import datetime

BASE_URL = "http://backend-financial-monitoring:8080"

if "users" not in st.session_state:
    st.session_state.users = {}  # username -> token

if "active_user" not in st.session_state:
    st.session_state.active_user = None

def switch_user(username):
    st.session_state.active_user = username
    st.session_state.token = st.session_state.users[username]

def api_request(method, endpoint, json=None, params=None):
    token = st.session_state.get("token", None)
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    return requests.request(method, f"{BASE_URL}{endpoint}", json=json, params=params, headers=headers)

def fetch_categories():
    resp = api_request("GET", "/category/all")
    return resp.json() if resp.ok else []

def fetch_category_options():
    categories = fetch_categories()
    return {cat['name']: cat['id'] for cat in categories}

BANKS = ["–°–±–µ—Ä–±–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–í–¢–ë", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"]

st.title("üí≥ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

menu = st.sidebar.selectbox("–ù–∞–≤–∏–≥–∞—Ü–∏—è", [
    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥", "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è",
    "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", "–ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º", "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"
])


if menu == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        resp = api_request("POST", "/auth/sign/up", json={"username": username, "password": password})
        st.write(resp.json())

elif menu == "–í—Ö–æ–¥":
    st.subheader("–í—Ö–æ–¥")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        resp = api_request("POST", "/auth/sign/in", json={"username": username, "password": password})
        if resp.ok:
            st.session_state.token = resp.json()["token"]
            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        else:
            st.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")

elif menu == "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è":
    st.subheader("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è")
    new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
    if st.button("–°–º–µ–Ω–∏—Ç—å"):
        resp = api_request("PUT", "/auth/password/change", json={"password": new_password})
        st.write(resp.json() if resp.ok else resp.text)

elif menu == "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é":
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    category_options = fetch_category_options()
    data = {
        "customerType": st.selectbox("–¢–∏–ø –ª–∏—Ü–∞", ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]),
        "transactionTime": st.date_input("–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", value=datetime.now()).strftime("%d-%m-%Y") + " " + st.time_input("–í—Ä–µ–º—è", value=datetime.now().time()).strftime("%H:%M:%S"),
        "transactionType": st.selectbox("–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ["–°–ø–∏—Å–∞–Ω–∏–µ", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]),
        "description": st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
        "sumValue": st.number_input("–°—É–º–º–∞", min_value=0.0),
        "senderBank": st.selectbox("–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", BANKS),
        "account": st.text_input("–°—á—ë—Ç"),
        "recipientBank": st.selectbox("–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", BANKS),
        "inn": st.text_input("–ò–ù–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "recipientAccount": st.text_input("–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "categoryId": category_options[st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", list(category_options.keys()))],
        "phone": st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
    }
    if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
        resp = api_request("POST", "/transaction/add", json=data)
        st.write(resp.json() if resp.ok else resp.text)

elif menu == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é":
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
    id = st.number_input("ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", step=1)
    category_options = fetch_category_options()
    data = {
        "customerType": st.selectbox("–¢–∏–ø –ª–∏—Ü–∞", ["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]),
        "transactionTime": st.date_input("–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", value=datetime.now()).strftime("%d-%m-%Y") + " " + st.time_input("–í—Ä–µ–º—è", value=datetime.now().time()).strftime("%H:%M:%S"),
        "transactionType": st.selectbox("–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ["–°–ø–∏—Å–∞–Ω–∏–µ", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]),
        "description": st.text_input("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
        "sumValue": st.number_input("–°—É–º–º–∞"),
        "senderBank": st.selectbox("–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", BANKS),
        "account": st.text_input("–°—á—ë—Ç"),
        "recipientBank": st.selectbox("–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", BANKS),
        "inn": st.text_input("–ò–ù–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "recipientAccount": st.text_input("–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "categoryId": category_options[st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", list(category_options.keys()))],
        "phone": st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
    }
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        resp = api_request("PUT", f"/transaction/{id}/edit", json=data)
        st.write(resp.json() if resp.ok else resp.text)

elif menu == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
    st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    id = st.number_input("ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", step=1)
    status = st.selectbox("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å", ["–ù–æ–≤–∞—è", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç–º–µ–Ω–µ–Ω–∞", "–ü–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω", "–ü–ª–∞—Ç–µ–∂ —É–¥–∞–ª–µ–Ω", "–í–æ–∑–≤—Ä–∞—Ç"])
    if st.button("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
        resp = api_request("PUT", f"/transaction/{id}/status", json={"status": status})
        st.write(resp.json() if resp.ok else resp.text)

elif menu == "–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é":
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    id = st.number_input("ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", step=1)
    if st.button("–£–¥–∞–ª–∏—Ç—å"):
        resp = api_request("DELETE", f"/transaction/{id}/delete")
        st.write(resp.text)

elif menu == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
    st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    subaction = st.radio("–î–µ–π—Å—Ç–≤–∏–µ", ["–ü—Ä–æ—Å–º–æ—Ç—Ä", "–î–æ–±–∞–≤–∏—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"])
    if subaction == "–ü—Ä–æ—Å–º–æ—Ç—Ä":
        resp = api_request("GET", "/category/all")
        st.dataframe(resp.json())
    elif subaction == "–î–æ–±–∞–≤–∏—Ç—å":
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
            resp = api_request("POST", "/category/add", json={"name": name})
            st.dataframe(resp.json() if resp.ok else resp.text)
    elif subaction == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        id = st.number_input("ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", step=1)
        name = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            resp = api_request("PUT", f"/category/{id}/edit", json={"name": name})
            st.dataframe(resp.json() if resp.ok else resp.text)

elif menu == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π":
    st.subheader("–§–∏–ª—å—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    filters = {
        "senderBank": st.text_input("–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"),
        "recipientBank": st.text_input("–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "dateStart": st.text_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (ISO)"),
        "dateEnd": st.text_input("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ (ISO)"),
        "status": st.text_input("–°—Ç–∞—Ç—É—Å"),
        "inn": st.text_input("–ò–ù–ù"),
        "minSumValue": st.number_input("–ú–∏–Ω. —Å—É–º–º–∞", step=0.01),
        "maxSumValue": st.number_input("–ú–∞–∫—Å. —Å—É–º–º–∞", step=0.01),
        "transactionType": st.text_input("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"),
        "categoryName": st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    }
    if st.button("–ù–∞–π—Ç–∏"):
        resp = api_request("GET", "/transaction/search", params={"properties": filters})
        st.dataframe(resp.json())

elif menu == "–ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º":
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º")
    filters = {
        "senderBank": st.text_input("–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"),
        "recipientBank": st.text_input("–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "dateStart": st.text_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (ISO)"),
        "dateEnd": st.text_input("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ (ISO)"),
        "status": st.text_input("–°—Ç–∞—Ç—É—Å"),
        "transactionType": st.selectbox("–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ["", "–°–ø–∏—Å–∞–Ω–∏–µ", "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"]),
        "categoryName": st.text_input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
        "inn": st.text_input("–ò–ù–ù"),
        "phone": st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
    }
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        resp = api_request("GET", "/transaction/search", params={"properties": filters})
        if resp.ok and resp.json():
            df = pd.DataFrame(resp.json())
            df["transactionTime"] = pd.to_datetime(df["transactionTime"], format="%d-%m-%Y %H:%M:%S")
            df["categoryName"] = df["category"].apply(lambda x: x.get("name") if isinstance(x, dict) else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            st.dataframe(df.sort_values("transactionTime", ascending=False))
            fig1 = px.line(df, x="transactionTime", y="sumValue", color="transactionType", markers=True)
            fig2 = px.bar(df, x="categoryName", y="sumValue", color="transactionType", barmode="group")
            df["bank"] = df["senderBank"].fillna("") + " ‚û° " + df["recipientBank"].fillna("")
            fig3 = px.bar(df, x="bank", y="sumValue", color="transactionType")
            st.plotly_chart(fig1)
            st.plotly_chart(fig2)
            st.plotly_chart(fig3)

elif menu == "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel":
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    filters = {
        "senderBank": st.text_input("–ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"),
        "recipientBank": st.text_input("–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"),
        "dateStart": st.text_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (ISO)"),
        "dateEnd": st.text_input("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ (ISO)")
    }
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        resp = api_request("GET", "/transaction/export", params={"properties": filters})
        if resp.ok:
            st.download_button("–°–∫–∞—á–∞—Ç—å Excel", data=resp.content, file_name="transactions.xlsx")
        else:
            st.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
